'        colon_pattern = r"\\s*[:�F]"\n        action_match = re.search(rf"Action{colon_pattern}", response, re.IGNORECASE)\n        thought_match = re.search(rf"Thought{colon_pattern}", response, re.IGNORECASE)\n        final_answer_match = re.search(rf"Final Answer{colon_pattern}", response, re.IGNORECASE)\n\n        if action_match:\n            if thought_match and thought_match.start() < action_match.start():\n                thought = response[thought_match.end():action_match.start()].strip()\n            elif thought_match:\n                thought = response[thought_match.end():action_match.start()].strip()\n            else:\n                thought = response[:action_match.start()].strip()\n\n            action_str_raw = response[action_match.end():].strip()\n            json_payload = _extract_json_payload(action_str_raw)\n            if not json_payload:\n                raise LLMResponseError("ActionブロックからJSONが検出できませんでした。")\n            return thought, json_payload, None\n\n        if final_answer_match:\n            if thought_match and thought_match.start() < final_answer_match.start():\n                thought = response[thought_match.end():final_answer_match.start()].strip()\n            elif thought_match:\n                thought = response[thought_match.end():final_answer_match.start()].strip()\n            else:\n                thought = response[:final_answer_match.start()].strip()\n            final_answer = response[final_answer_match.end():].strip()\n            return thought, None, final_answer\n\n        if thought_match:\n            thought = response[thought_match.end():].strip()\n            return thought, None, None\n\n        final_answer_candidate = _interpret_completion_response(response)\n        if final_answer_candidate is not None:\n            return "", None, final_answer_candidate\n\n        preview = response.replace("\n", " ").strip()\n        print(\n            f"LLM parse error raw response: {preview'